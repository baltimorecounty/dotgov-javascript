var BcModal =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/components/Modal.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/components/Modal.js":
/*!*********************************!*\
  !*** ./src/components/Modal.js ***!
  \*********************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _polyfills_closest_polyfill__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../polyfills/closest.polyfill */ \"./src/polyfills/closest.polyfill.js\");\n/* harmony import */ var _polyfills_closest_polyfill__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_polyfills_closest_polyfill__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _w3_dialog__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./w3-dialog */ \"./src/components/w3-dialog.js\");\n/* harmony import */ var _utilities_dom_utilities__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utilities/dom.utilities */ \"./src/utilities/dom.utilities.js\");\n\n\n\nvar cssClasses = {\n  active: \"active\",\n  modalCloseButton: \"dg_modal__close-button\",\n  modalOpenButton: \"dg_modal__open-button\",\n  modalOverlay: \"dialog-backdrop\",\n\n  /** overlay is transparent gray section around the modal */\n  canCloseOnOverlayClick: \"can-dismiss\"\n};\nvar selectors = {\n  activeDismissibleModal: \".dg_modal[data-dismissible]\"\n};\n/**\r\n * Hide the main site navigation button by reducing its z-index value when opening the\r\n * modal so the button doesn't appear on top of it.\r\n */\n\nvar hideNavButton = function hideNavButton() {\n  var windowWidth = $(window).width();\n  var fakeSiteButton = document.getElementById(\"bc_site-nav__toggle-button\");\n\n  if (fakeSiteButton) {\n    if (windowWidth <= 900) {\n      fakeSiteButton.style.zIndex = \"0\";\n    } else {\n      fakeSiteButton.style.zIndex = \"2147483647\";\n    }\n  }\n};\n/**\r\n * Restore the main site navigation button to its original z-index so it reappears when\r\n * the modal is closed.\r\n */\n\n\nvar showNavButton = function showNavButton() {\n  var fakeSiteButton = document.getElementById(\"bc_site-nav__toggle-button\");\n\n  if (fakeSiteButton) {\n    fakeSiteButton.style.zIndex = \"2147483647\";\n  }\n};\n/**\r\n * Handle the modal overlay click.\r\n * The modal markup will determine whether or not the modal can close on overlay click\r\n * based on whether it has the data-dismissible data attribute.\r\n * @param {element:click} clickEvent - the observable overlay click event\r\n * @listens element:click\r\n */\n\n\nvar handleActiveOverlayClick = function handleActiveOverlayClick(clickEvent) {\n  var activeDismissibleModalElm = Object(_utilities_dom_utilities__WEBPACK_IMPORTED_MODULE_2__[\"GetFirstElementOrDefault\"])(document, selectors.activeDismissibleModal);\n  var isDismissible = activeDismissibleModalElm && activeDismissibleModalElm.getAttribute(\"data-dismissible\") !== \"false\";\n\n  if (isDismissible) {\n    /** The  w3 logic we used requires the close button to be passed into the closeDialog function */\n    var closeButton = Object(_utilities_dom_utilities__WEBPACK_IMPORTED_MODULE_2__[\"GetFirstElementOrDefault\"])(activeDismissibleModalElm, \".\".concat(cssClasses.modalCloseButton));\n    showNavButton();\n    window.closeDialog(closeButton);\n  }\n};\n/**\r\n * Captures all dom click events in order to bind all event with a particular class\r\n * @param {document:click} clickEvent - the observable click event\r\n * @listens document:click\r\n */\n\n\nvar handleDocumentClick = function handleDocumentClick(clickEvent) {\n  var targetClassList = clickEvent.target.classList; // If the clicked element doesn't have the right selector, bail\n\n  var isModalOpenButtonClick = targetClassList.contains(cssClasses.modalOpenButton);\n  var isModalCloseButtonClick = targetClassList.contains(cssClasses.modalCloseButton) || !!clickEvent.target.closest(\".\".concat(cssClasses.modalCloseButton));\n  var isOverlayClick = targetClassList.contains(cssClasses.modalOverlay) && targetClassList.contains(cssClasses.active);\n\n  if (isModalOpenButtonClick) {\n    handleModalOpenButtonClick(clickEvent);\n  } else if (isModalCloseButtonClick) {\n    handleModalCloseButtonClick(clickEvent);\n  } else if (isOverlayClick) {\n    handleActiveOverlayClick(clickEvent);\n  } else {\n    return;\n  }\n};\n/**\r\n * Closes the closest modal\r\n * @param {*} clickEvent\r\n */\n\n\nvar handleModalCloseButtonClick = function handleModalCloseButtonClick(clickEvent) {\n  showNavButton();\n  window.closeDialog(clickEvent.target);\n};\n/**\r\n * Opens the modal that matches it's id to data-target attribute of the open button\r\n * @param {*} clickEvent\r\n */\n\n\nvar handleModalOpenButtonClick = function handleModalOpenButtonClick(clickEvent) {\n  var modalButtonElm = clickEvent.target;\n  var targetModalId = modalButtonElm.getAttribute(\"data-target\");\n  window.openDialog(targetModalId, modalButtonElm);\n  hideNavButton();\n};\n\ndocument.addEventListener(\"click\", handleDocumentClick, false);\n\n//# sourceURL=webpack://Bc%5Bname%5D/./src/components/Modal.js?");

/***/ }),

/***/ "./src/components/w3-dialog.js":
/*!*************************************!*\
  !*** ./src/components/w3-dialog.js ***!
  \*************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _utilities_w3_utilities__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utilities/w3-utilities */ \"./src/utilities/w3-utilities.js\");\n/* harmony import */ var _utilities_w3_utilities__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_utilities_w3_utilities__WEBPACK_IMPORTED_MODULE_0__);\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n\n/*\r\n *   Baltimore County NOTE: This was taken from w3c https://www.w3.org/TR/wai-aria-practices/examples/dialog-modal/dialog.html\r\n *   This content is licensed according to the W3C Software License at\r\n *   https://www.w3.org/Consortium/Legal/2015/copyright-software-and-document\r\n */\n\nvar aria = aria || {};\naria.Utils = aria.Utils || {};\n/**\r\n * @namespace aria\r\n */\n\nvar aria = aria || {};\n/**\r\n * @desc\r\n *  Key code constants\r\n */\n\naria.KeyCode = {\n  BACKSPACE: 8,\n  TAB: 9,\n  RETURN: 13,\n  ESC: 27,\n  SPACE: 32,\n  PAGE_UP: 33,\n  PAGE_DOWN: 34,\n  END: 35,\n  HOME: 36,\n  LEFT: 37,\n  UP: 38,\n  RIGHT: 39,\n  DOWN: 40,\n  DELETE: 46\n};\naria.Utils = aria.Utils || {}; // Polyfill src https://developer.mozilla.org/en-US/docs/Web/API/Element/matches\n\naria.Utils.matches = function (element, selector) {\n  if (!Element.prototype.matches) {\n    Element.prototype.matches = Element.prototype.matchesSelector || Element.prototype.mozMatchesSelector || Element.prototype.msMatchesSelector || Element.prototype.oMatchesSelector || Element.prototype.webkitMatchesSelector || function (s) {\n      var matches = element.parentNode.querySelectorAll(s);\n      var i = matches.length;\n\n      while (--i >= 0 && matches.item(i) !== this) {}\n\n      return i > -1;\n    };\n  }\n\n  return element.matches(selector);\n};\n\naria.Utils.remove = function (item) {\n  if (item.remove && typeof item.remove === \"function\") {\n    return item.remove();\n  }\n\n  if (item.parentNode && item.parentNode.removeChild && typeof item.parentNode.removeChild === \"function\") {\n    return item.parentNode.removeChild(item);\n  }\n\n  return false;\n};\n\naria.Utils.isFocusable = function (element) {\n  if (element.tabIndex > 0 || element.tabIndex === 0 && element.getAttribute(\"tabIndex\") !== null) {\n    return true;\n  }\n\n  if (element.disabled) {\n    return false;\n  }\n\n  switch (element.nodeName) {\n    case \"A\":\n      return !!element.href && element.rel != \"ignore\";\n\n    case \"INPUT\":\n      return element.type != \"hidden\" && element.type != \"file\";\n\n    case \"BUTTON\":\n    case \"SELECT\":\n    case \"TEXTAREA\":\n      return true;\n\n    default:\n      return false;\n  }\n};\n\naria.Utils.getAncestorBySelector = function (element, selector) {\n  if (!aria.Utils.matches(element, selector + \" \" + element.tagName)) {\n    // Element is not inside an element that matches selector\n    return null;\n  } // Move up the DOM tree until a parent matching the selector is found\n\n\n  var currentNode = element;\n  var ancestor = null;\n\n  while (ancestor === null) {\n    if (aria.Utils.matches(currentNode.parentNode, selector)) {\n      ancestor = currentNode.parentNode;\n    } else {\n      currentNode = currentNode.parentNode;\n    }\n  }\n\n  return ancestor;\n};\n\naria.Utils.hasClass = function (element, className) {\n  return new RegExp(\"(\\\\s|^)\" + className + \"(\\\\s|$)\").test(element.className);\n};\n\naria.Utils.addClass = function (element, className) {\n  if (!aria.Utils.hasClass(element, className)) {\n    element.className += \" \" + className;\n  }\n};\n\naria.Utils.removeClass = function (element, className) {\n  var classRegex = new RegExp(\"(\\\\s|^)\" + className + \"(\\\\s|$)\");\n  element.className = element.className.replace(classRegex, \" \").trim();\n};\n\naria.Utils.bindMethods = function (object\n/* , ...methodNames */\n) {\n  var methodNames = Array.prototype.slice.call(arguments, 1);\n  methodNames.forEach(function (method) {\n    object[method] = object[method].bind(object);\n  });\n};\n\n(function () {\n  /*\r\n   * When util functions move focus around, set this true so the focus listener\r\n   * can ignore the events.\r\n   */\n  aria.Utils.IgnoreUtilFocusChanges = false;\n  aria.Utils.dialogOpenClass = \"has-dialog\";\n  /**\r\n   * @desc Set focus on descendant nodes until the first focusable element is\r\n   *       found.\r\n   * @param element\r\n   *          DOM node for which to find the first focusable descendant.\r\n   * @returns\r\n   *  true if a focusable element is found and focus is set.\r\n   */\n\n  aria.Utils.focusFirstDescendant = function (element) {\n    for (var i = 0; i < element.childNodes.length; i++) {\n      var child = element.childNodes[i];\n\n      if (aria.Utils.attemptFocus(child) || aria.Utils.focusFirstDescendant(child)) {\n        return true;\n      }\n    }\n\n    return false;\n  }; // end focusFirstDescendant\n\n  /**\r\n   * @desc Find the last descendant node that is focusable.\r\n   * @param element\r\n   *          DOM node for which to find the last focusable descendant.\r\n   * @returns\r\n   *  true if a focusable element is found and focus is set.\r\n   */\n\n\n  aria.Utils.focusLastDescendant = function (element) {\n    for (var i = element.childNodes.length - 1; i >= 0; i--) {\n      var child = element.childNodes[i];\n\n      if (aria.Utils.attemptFocus(child) || aria.Utils.focusLastDescendant(child)) {\n        return true;\n      }\n    }\n\n    return false;\n  }; // end focusLastDescendant\n\n  /**\r\n   * @desc Set Attempt to set focus on the current node.\r\n   * @param element\r\n   *          The node to attempt to focus on.\r\n   * @returns\r\n   *  true if element is focused.\r\n   */\n\n\n  aria.Utils.attemptFocus = function (element) {\n    if (!aria.Utils.isFocusable(element)) {\n      return false;\n    }\n\n    aria.Utils.IgnoreUtilFocusChanges = true;\n\n    try {\n      element.focus();\n    } catch (e) {}\n\n    aria.Utils.IgnoreUtilFocusChanges = false;\n    return document.activeElement === element;\n  }; // end attemptFocus\n\n  /* Modals can open modals. Keep track of them with this array. */\n\n\n  aria.OpenDialogList = aria.OpenDialogList || new Array(0);\n  /**\r\n   * @returns the last opened dialog (the current dialog)\r\n   */\n\n  aria.getCurrentDialog = function () {\n    if (aria.OpenDialogList && aria.OpenDialogList.length) {\n      return aria.OpenDialogList[aria.OpenDialogList.length - 1];\n    }\n  };\n\n  aria.closeCurrentDialog = function () {\n    var currentDialog = aria.getCurrentDialog();\n\n    if (currentDialog) {\n      currentDialog.close();\n      return true;\n    }\n\n    return false;\n  };\n\n  aria.handleEscape = function (event) {\n    var key = event.which || event.keyCode;\n\n    if (key === aria.KeyCode.ESC && aria.closeCurrentDialog()) {\n      event.stopPropagation();\n    }\n  };\n\n  document.addEventListener(\"keyup\", aria.handleEscape);\n  /**\r\n   * @constructor\r\n   * @desc Dialog object providing modal focus management.\r\n   *\r\n   * Assumptions: The element serving as the dialog container is present in the\r\n   * DOM and hidden. The dialog container has role='dialog'.\r\n   *\r\n   * @param dialogId\r\n   *          The ID of the element serving as the dialog container.\r\n   * @param focusAfterClosed\r\n   *          Either the DOM node or the ID of the DOM node to focus when the\r\n   *          dialog closes.\r\n   * @param focusFirst\r\n   *          Optional parameter containing either the DOM node or the ID of the\r\n   *          DOM node to focus when the dialog opens. If not specified, the\r\n   *          first focusable element in the dialog will receive focus.\r\n   */\n\n  aria.Dialog = function (dialogId, focusAfterClosed, focusFirst) {\n    this.dialogNode = document.getElementById(dialogId);\n\n    if (this.dialogNode === null) {\n      throw new Error('No element found with id=\"' + dialogId + '\".');\n    }\n\n    var validRoles = [\"dialog\", \"alertdialog\"];\n    var isDialog = (this.dialogNode.getAttribute(\"role\") || \"\").trim().split(/\\s+/g).some(function (token) {\n      return validRoles.some(function (role) {\n        return token === role;\n      });\n    });\n\n    if (!isDialog) {\n      throw new Error(\"Dialog() requires a DOM element with ARIA role of dialog or alertdialog.\");\n    } // Wrap in an individual backdrop element if one doesn't exist\n    // Native <dialog> elements use the ::backdrop pseudo-element, which\n    // works similarly.\n\n\n    var backdropClass = \"dialog-backdrop\";\n\n    if (this.dialogNode.parentNode.classList.contains(backdropClass)) {\n      this.backdropNode = this.dialogNode.parentNode;\n    } else {\n      this.backdropNode = document.createElement(\"div\");\n      this.backdropNode.className = backdropClass;\n      this.dialogNode.parentNode.insertBefore(this.backdropNode, this.dialogNode);\n      this.backdropNode.appendChild(this.dialogNode);\n    }\n\n    this.backdropNode.classList.add(\"active\"); // Disable scroll on the body element\n\n    document.body.classList.add(aria.Utils.dialogOpenClass);\n\n    if (typeof focusAfterClosed === \"string\") {\n      this.focusAfterClosed = document.getElementById(focusAfterClosed);\n    } else if (_typeof(focusAfterClosed) === \"object\") {\n      this.focusAfterClosed = focusAfterClosed;\n    } else {\n      throw new Error(\"the focusAfterClosed parameter is required for the aria.Dialog constructor.\");\n    }\n\n    if (typeof focusFirst === \"string\") {\n      this.focusFirst = document.getElementById(focusFirst);\n    } else if (_typeof(focusFirst) === \"object\") {\n      this.focusFirst = focusFirst;\n    } else {\n      this.focusFirst = null;\n    } // Bracket the dialog node with two invisible, focusable nodes.\n    // While this dialog is open, we use these to make sure that focus never\n    // leaves the document even if dialogNode is the first or last node.\n\n\n    var preDiv = document.createElement(\"div\");\n    this.preNode = this.dialogNode.parentNode.insertBefore(preDiv, this.dialogNode);\n    this.preNode.tabIndex = 0;\n    var postDiv = document.createElement(\"div\");\n    this.postNode = this.dialogNode.parentNode.insertBefore(postDiv, this.dialogNode.nextSibling);\n    this.postNode.tabIndex = 0; // If this modal is opening on top of one that is already open,\n    // get rid of the document focus listener of the open dialog.\n\n    if (aria.OpenDialogList.length > 0) {\n      aria.getCurrentDialog().removeListeners();\n    }\n\n    this.addListeners();\n    aria.OpenDialogList.push(this);\n    this.clearDialog();\n    /** baltimore county specific - added dg_modal and dark to help with  styling */\n\n    this.dialogNode.className = \"dg_modal default_dialog dark\"; // make visible\n\n    if (this.focusFirst) {\n      this.focusFirst.focus();\n    } else {\n      aria.Utils.focusFirstDescendant(this.dialogNode);\n    }\n\n    this.lastFocus = document.activeElement;\n  }; // end Dialog constructor\n\n\n  aria.Dialog.prototype.clearDialog = function () {\n    Array.prototype.map.call(this.dialogNode.querySelectorAll(\"input\"), function (input) {\n      input.value = \"\";\n    });\n  };\n  /**\r\n   * @desc\r\n   *  Hides the current top dialog,\r\n   *  removes listeners of the top dialog,\r\n   *  restore listeners of a parent dialog if one was open under the one that just closed,\r\n   *  and sets focus on the element specified for focusAfterClosed.\r\n   */\n\n\n  aria.Dialog.prototype.close = function () {\n    aria.OpenDialogList.pop();\n    this.removeListeners();\n    aria.Utils.remove(this.preNode);\n    aria.Utils.remove(this.postNode);\n    this.dialogNode.className = \"hidden\";\n    this.backdropNode.classList.remove(\"active\");\n    this.focusAfterClosed.focus(); // If a dialog was open underneath this one, restore its listeners.\n\n    if (aria.OpenDialogList.length > 0) {\n      aria.getCurrentDialog().addListeners();\n    } else {\n      document.body.classList.remove(aria.Utils.dialogOpenClass);\n    }\n  }; // end close\n\n  /**\r\n   * @desc\r\n   *  Hides the current dialog and replaces it with another.\r\n   *\r\n   * @param newDialogId\r\n   *  ID of the dialog that will replace the currently open top dialog.\r\n   * @param newFocusAfterClosed\r\n   *  Optional ID or DOM node specifying where to place focus when the new dialog closes.\r\n   *  If not specified, focus will be placed on the element specified by the dialog being replaced.\r\n   * @param newFocusFirst\r\n   *  Optional ID or DOM node specifying where to place focus in the new dialog when it opens.\r\n   *  If not specified, the first focusable element will receive focus.\r\n   */\n\n\n  aria.Dialog.prototype.replace = function (newDialogId, newFocusAfterClosed, newFocusFirst) {\n    var closedDialog = aria.getCurrentDialog();\n    aria.OpenDialogList.pop();\n    this.removeListeners();\n    aria.Utils.remove(this.preNode);\n    aria.Utils.remove(this.postNode);\n    this.dialogNode.className = \"hidden\";\n    this.backdropNode.classList.remove(\"active\");\n    var focusAfterClosed = newFocusAfterClosed || this.focusAfterClosed;\n    var dialog = new aria.Dialog(newDialogId, focusAfterClosed, newFocusFirst);\n  }; // end replace\n\n\n  aria.Dialog.prototype.addListeners = function () {\n    document.addEventListener(\"focus\", this.trapFocus, true);\n  }; // end addListeners\n\n\n  aria.Dialog.prototype.removeListeners = function () {\n    document.removeEventListener(\"focus\", this.trapFocus, true);\n  }; // end removeListeners\n\n\n  aria.Dialog.prototype.trapFocus = function (event) {\n    if (aria.Utils.IgnoreUtilFocusChanges) {\n      return;\n    }\n\n    var currentDialog = aria.getCurrentDialog();\n\n    if (currentDialog.dialogNode.contains(event.target)) {\n      currentDialog.lastFocus = event.target;\n    } else {\n      aria.Utils.focusFirstDescendant(currentDialog.dialogNode);\n\n      if (currentDialog.lastFocus == document.activeElement) {\n        aria.Utils.focusLastDescendant(currentDialog.dialogNode);\n      }\n\n      currentDialog.lastFocus = document.activeElement;\n    }\n  }; // end trapFocus\n\n\n  window.openDialog = function (dialogId, focusAfterClosed, focusFirst) {\n    var dialog = new aria.Dialog(dialogId, focusAfterClosed, focusFirst);\n  };\n\n  window.closeDialog = function (closeButton) {\n    var topDialog = aria.getCurrentDialog();\n\n    if (topDialog.dialogNode.contains(closeButton)) {\n      topDialog.close();\n    }\n  }; // end closeDialog\n\n\n  window.replaceDialog = function (newDialogId, newFocusAfterClosed, newFocusFirst) {\n    var topDialog = aria.getCurrentDialog();\n\n    if (topDialog.dialogNode.contains(document.activeElement)) {\n      topDialog.replace(newDialogId, newFocusAfterClosed, newFocusFirst);\n    }\n  }; // end replaceDialog\n\n})();\n\n//# sourceURL=webpack://Bc%5Bname%5D/./src/components/w3-dialog.js?");

/***/ }),

/***/ "./src/polyfills/closest.polyfill.js":
/*!*******************************************!*\
  !*** ./src/polyfills/closest.polyfill.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("if (!Element.prototype.matches) {\n  Element.prototype.matches = Element.prototype.msMatchesSelector || Element.prototype.webkitMatchesSelector;\n}\n\nif (!Element.prototype.closest) {\n  Element.prototype.closest = function (s) {\n    var el = this;\n\n    do {\n      if (el.matches(s)) return el;\n      el = el.parentElement || el.parentNode;\n    } while (el !== null && el.nodeType === 1);\n\n    return null;\n  };\n}\n\n//# sourceURL=webpack://Bc%5Bname%5D/./src/polyfills/closest.polyfill.js?");

/***/ }),

/***/ "./src/utilities/dom.utilities.js":
/*!****************************************!*\
  !*** ./src/utilities/dom.utilities.js ***!
  \****************************************/
/*! exports provided: AddClassToElms, GetFirstElementOrDefault, RemoveClassFromElms, SetAttributeForElms, ToggleClassForElms */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"AddClassToElms\", function() { return AddClassToElms; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"GetFirstElementOrDefault\", function() { return GetFirstElementOrDefault; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"RemoveClassFromElms\", function() { return RemoveClassFromElms; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"SetAttributeForElms\", function() { return SetAttributeForElms; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ToggleClassForElms\", function() { return ToggleClassForElms; });\n/**\r\n * Get the first element based on a css selector\r\n * @param {*} elm\r\n * @param {string} querySelector\r\n * @returns HTMLElement or null if the query selector does not match any elements.\r\n */\nvar GetFirstElementOrDefault = function GetFirstElementOrDefault(elm, querySelector) {\n  var elms = elm.querySelectorAll(querySelector);\n  return elms ? elms[0] : null;\n};\n/**\r\n * Set a specific attribute on a group of elements\r\n * @param {NodeList} elms collection of nodes, usually from document.querySelectorAll\r\n * @param {string} attributeName name of the attribute\r\n * @param {*} attributeValue attribute value\r\n */\n\n\nvar SetAttributeForElms = function SetAttributeForElms(elms, attributeName, attributeValue) {\n  elms.forEach(function (elm) {\n    elm.setAttribute(attributeName, attributeValue);\n  });\n};\n/**\r\n * Add Css Classes for a group of elements\r\n * @param {NodeList} elms collection of nodes, usually from document.querySelectorAll\r\n * @param {string} cssClass space separated string of css classes\r\n */\n\n\nvar AddClassToElms = function AddClassToElms(elms, cssClass) {\n  elms.forEach(function (elm) {\n    elm.classList.add(cssClass);\n  });\n};\n/**\r\n * Remove Css Classes for a group of elements\r\n * @param {NodeList} elms collection of nodes, usually from document.querySelectorAll\r\n * @param {string} cssClass space separated string of css classes\r\n */\n\n\nvar RemoveClassFromElms = function RemoveClassFromElms(elms, cssClass) {\n  elms.forEach(function (elm) {\n    elm.classList.remove(cssClass);\n  });\n};\n/**\r\n * Toggle Css Classes for a group of elements\r\n * @param {NodeList} elms collection of nodes, usually from document.querySelectorAll\r\n * @param {string} cssClass space separated string of css classes\r\n */\n\n\nvar ToggleClassForElms = function ToggleClassForElms(elms, cssClass) {\n  elms.forEach(function (elm) {\n    elm.classList.toggle(cssClass);\n  });\n};\n\n\n\n//# sourceURL=webpack://Bc%5Bname%5D/./src/utilities/dom.utilities.js?");

/***/ }),

/***/ "./src/utilities/w3-utilities.js":
/*!***************************************!*\
  !*** ./src/utilities/w3-utilities.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/**\r\n * @namespace aria\r\n */\nvar aria = aria || {};\n/**\r\n * @desc\r\n *  Key code constants\r\n */\n\naria.KeyCode = {\n  BACKSPACE: 8,\n  TAB: 9,\n  RETURN: 13,\n  ESC: 27,\n  SPACE: 32,\n  PAGE_UP: 33,\n  PAGE_DOWN: 34,\n  END: 35,\n  HOME: 36,\n  LEFT: 37,\n  UP: 38,\n  RIGHT: 39,\n  DOWN: 40,\n  DELETE: 46\n};\naria.Utils = aria.Utils || {}; // Polyfill src https://developer.mozilla.org/en-US/docs/Web/API/Element/matches\n\naria.Utils.matches = function (element, selector) {\n  if (!Element.prototype.matches) {\n    Element.prototype.matches = Element.prototype.matchesSelector || Element.prototype.mozMatchesSelector || Element.prototype.msMatchesSelector || Element.prototype.oMatchesSelector || Element.prototype.webkitMatchesSelector || function (s) {\n      var matches = element.parentNode.querySelectorAll(s);\n      var i = matches.length;\n\n      while (--i >= 0 && matches.item(i) !== this) {}\n\n      return i > -1;\n    };\n  }\n\n  return element.matches(selector);\n};\n\naria.Utils.remove = function (item) {\n  if (item.remove && typeof item.remove === \"function\") {\n    return item.remove();\n  }\n\n  if (item.parentNode && item.parentNode.removeChild && typeof item.parentNode.removeChild === \"function\") {\n    return item.parentNode.removeChild(item);\n  }\n\n  return false;\n};\n\naria.Utils.isFocusable = function (element) {\n  if (element.tabIndex > 0 || element.tabIndex === 0 && element.getAttribute(\"tabIndex\") !== null) {\n    return true;\n  }\n\n  if (element.disabled) {\n    return false;\n  }\n\n  switch (element.nodeName) {\n    case \"A\":\n      return !!element.href && element.rel != \"ignore\";\n\n    case \"INPUT\":\n      return element.type != \"hidden\" && element.type != \"file\";\n\n    case \"BUTTON\":\n    case \"SELECT\":\n    case \"TEXTAREA\":\n      return true;\n\n    default:\n      return false;\n  }\n};\n\naria.Utils.getAncestorBySelector = function (element, selector) {\n  if (!aria.Utils.matches(element, selector + \" \" + element.tagName)) {\n    // Element is not inside an element that matches selector\n    return null;\n  } // Move up the DOM tree until a parent matching the selector is found\n\n\n  var currentNode = element;\n  var ancestor = null;\n\n  while (ancestor === null) {\n    if (aria.Utils.matches(currentNode.parentNode, selector)) {\n      ancestor = currentNode.parentNode;\n    } else {\n      currentNode = currentNode.parentNode;\n    }\n  }\n\n  return ancestor;\n};\n\naria.Utils.hasClass = function (element, className) {\n  return new RegExp(\"(\\\\s|^)\" + className + \"(\\\\s|$)\").test(element.className);\n};\n\naria.Utils.addClass = function (element, className) {\n  if (!aria.Utils.hasClass(element, className)) {\n    element.className += \" \" + className;\n  }\n};\n\naria.Utils.removeClass = function (element, className) {\n  var classRegex = new RegExp(\"(\\\\s|^)\" + className + \"(\\\\s|$)\");\n  element.className = element.className.replace(classRegex, \" \").trim();\n};\n\naria.Utils.bindMethods = function (object\n/* , ...methodNames */\n) {\n  var methodNames = Array.prototype.slice.call(arguments, 1);\n  methodNames.forEach(function (method) {\n    object[method] = object[method].bind(object);\n  });\n};\n\n//# sourceURL=webpack://Bc%5Bname%5D/./src/utilities/w3-utilities.js?");

/***/ })

/******/ });