var BcStepList =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/components/StepList.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/components/StepList.js":
/*!************************************!*\
  !*** ./src/components/StepList.js ***!
  \************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _utilities_dom_utilities__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utilities/dom.utilities */ \"./src/utilities/dom.utilities.js\");\n/* harmony import */ var _polyfills_array_from_polyfill__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../polyfills/array-from.polyfill */ \"./src/polyfills/array-from.polyfill.js\");\n/* harmony import */ var _polyfills_array_from_polyfill__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_polyfills_array_from_polyfill__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _polyfills_closest_polyfill__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../polyfills/closest.polyfill */ \"./src/polyfills/closest.polyfill.js\");\n/* harmony import */ var _polyfills_closest_polyfill__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_polyfills_closest_polyfill__WEBPACK_IMPORTED_MODULE_2__);\n\n\n\nvar states = {\n  collapsed: \"collapsed\",\n  hide: \"Hide\",\n  hideAll: \"Hide All\",\n  show: \"Show\",\n  showAll: \"Show All\",\n  \"static\": \"static\"\n};\nvar cssClasses = {\n  collapsed: \"collapsed\",\n  hovered: \"is-hovered\",\n  stepList: \"dg_step-list\",\n  detailsToggleButton: \"dg_step-list__toggle-btn\",\n  details: \"dg_step-list__details\",\n  showAllStepsButton: \"dg_step-list__show-all-btn\",\n  toggleButtonHeading: \"dg_step-list__toggle-btn__title\",\n  toggleButtonText: \"dg_step-list__toggle-btn__btn-text\",\n  section: \"dg_step-list__list-section\"\n};\n/**\r\n * Add hover events for each list item for a given step list\r\n * @param {*} stepListElm\r\n */\n\nvar addStepListHoverEvents = function addStepListHoverEvents(stepListElm) {\n  var stepListItemElms = stepListElm.querySelectorAll(\".\".concat(cssClasses.section));\n  /** Add hover events for individual step list items, to make styling the step circles easier. */\n\n  stepListItemElms.forEach(function (stepListItemElm) {\n    var itemButtonElm = Object(_utilities_dom_utilities__WEBPACK_IMPORTED_MODULE_0__[\"GetFirstElementOrDefault\"])(stepListItemElm, \".\".concat(cssClasses.detailsToggleButton));\n    itemButtonElm.addEventListener(\"mouseenter\", function (mouseenterEvent) {\n      toggleItemHoverStatus(mouseenterEvent, true);\n    });\n    itemButtonElm.addEventListener(\"mouseleave\", function (mouseleaveEvent) {\n      toggleItemHoverStatus(mouseleaveEvent, false);\n    });\n  });\n};\n/**\r\n * Display or Hide Details for a given section of the step list based on the button state (show/hide)\r\n * @param {HTMLElement} detailsSectionElm\r\n * @return {void}\r\n */\n\n\nvar displaySectionDetails = function displaySectionDetails(detailsSectionElm, buttonState) {\n  detailsSectionElm.style.display = isButtonStateShow(buttonState) ? \"block\" : \"none\";\n};\n/**\r\n *\r\n * @param {string} buttonText  buttonElm.textContent, will be \"Show\" or \"Hide\"\r\n * @returns {string} \"Show\" if the button text is equal to \"Hide\" or vice-versa\r\n */\n\n\nvar getOppositeDetailsToggleButtonState = function getOppositeDetailsToggleButtonState(buttonText) {\n  return isButtonStateShow(buttonText) ? states.hide : states.show;\n};\n/**\r\n * Determine if a step list has at least one section open\r\n * @param {HTMLElement} stepListElm\r\n * @returns {boolean} true if the given step list has at least one section open\r\n */\n\n\nvar hasAtLeastOneDetailSectionVisible = function hasAtLeastOneDetailSectionVisible(stepListElm) {\n  return Array.from(stepListElm.querySelectorAll(\".\".concat(cssClasses.detailsToggleButton))).filter(function (elm) {\n    return elm.textContent.toLowerCase().indexOf(states.show.toLowerCase()) > -1;\n  }).length > 0;\n};\n/**\r\n * Handle \"Show All\" Button Click based on a Step List\r\n * @param {Object} clickEvent\r\n * @return {void}\r\n */\n\n\nvar handleAllStepButtonClick = function handleAllStepButtonClick(clickEvent) {\n  var buttonElm = clickEvent.target;\n  var sectionElm = buttonElm.closest(\".\".concat(cssClasses.stepList));\n  var buttonState = buttonElm.textContent;\n  updateSections(sectionElm, getOppositeDetailsToggleButtonState(buttonState));\n  toggleAllButtonText(buttonElm, buttonState);\n};\n/**\r\n * Handle the details button toggle click for a given step list section detail button\r\n * @param {object} clickEvent\r\n */\n\n\nvar handleDetailsToggleButtonClick = function handleDetailsToggleButtonClick(clickEvent) {\n  var target = clickEvent.target;\n  var buttonElm = target.classList.contains(cssClasses.toggleBtnElm) ? target : target.parentElement;\n  var buttonState = buttonElm.textContent;\n  var detailElms = buttonElm.closest(\".\".concat(cssClasses.section)).querySelectorAll(\".\".concat(cssClasses.details));\n  Array.from(detailElms).forEach(function (detailElm) {\n    displaySectionDetails(detailElm, buttonState);\n  });\n  setAriaExpanded(buttonElm, isButtonStateShow(buttonState));\n  toggleDetailButtonText(buttonElm, buttonState);\n  updateToggleAllButton(detailElms);\n};\n\nvar handleDocumentClick = function handleDocumentClick(clickEvent) {\n  var target = clickEvent.target; // If the clicked element doesn't have the right selector, bail\n\n  var isDetailsToggleClick = target.parentElement.classList.contains(cssClasses.detailsToggleButton) || target.classList.contains(cssClasses.detailsToggleButton);\n\n  if (isDetailsToggleClick) {\n    handleDetailsToggleButtonClick(clickEvent);\n  } else if (target.classList.contains(cssClasses.showAllStepsButton)) {\n    handleAllStepButtonClick(clickEvent);\n  } else {\n    return;\n  }\n};\n/**\r\n * Determine if the given button text is equal to \"Show\" (case insensitive)\r\n * @param {string} buttonText buttonElm.textContent, will be \"Show\" or \"Hide\"\r\n * @returns {boolean} true if the button text is \"Show\" (case insensitive)\r\n */\n\n\nvar isButtonStateShow = function isButtonStateShow(buttonText) {\n  return buttonText.toLowerCase().indexOf(states.show.toLowerCase()) > -1;\n};\n/**\r\n * Determine if the show all button's active text is \"Hide All\"\r\n * @param {HTMLElement} showAllButtonElm\r\n * @returns {boolean} true if the show all button's text is set to \"hide all\"\r\n */\n\n\nvar isHideAllVisible = function isHideAllVisible(showAllButtonElm) {\n  return showAllButtonElm && showAllButtonElm.textContent.toLowerCase() === states.hideAll.toLowerCase();\n};\n/**\r\n * Helper to set an elements text\r\n * @param {*} elm\r\n * @param {string} text desired text for element\r\n */\n\n\nvar setElementText = function setElementText(elm, text) {\n  elm.textContent = text;\n};\n/**\r\n * Set aria expanded based on isExpanded flag\r\n * @param {HTMLElement} elm\r\n * @param {boolean} isExpanded\r\n */\n\n\nvar setAriaExpanded = function setAriaExpanded(elm, isExpanded) {\n  elm.setAttribute(\"aria-expanded\", isExpanded);\n};\n/**\r\n * Toggles all toggle button text for a given button state\r\n * @param {HTMLElement} buttonElm\r\n * @param {string} buttonState representation of the button state as a string\r\n * @return {void} if button state is \"Show All\" then the button text will be \"Hide All\" or vice-versa\r\n */\n\n\nvar toggleAllButtonText = function toggleAllButtonText(buttonElm, buttonState) {\n  setElementText(buttonElm, isButtonStateShow(buttonState) ? states.hideAll : states.showAll);\n};\n/**\r\n * Toggles detail toggle button text for a given button state\r\n * @param {HTMLElement} buttonElm\r\n * @param {string} buttonState representation of the button state as a string\r\n * @return {void} if button state is \"Show\" then the button text will be \"Hide\" or vice-versa\r\n */\n\n\nvar toggleDetailButtonText = function toggleDetailButtonText(buttonElm, buttonState) {\n  var buttonTextElm = buttonElm.querySelectorAll(\".\".concat(cssClasses.toggleButtonText));\n  var elmToUpdate = buttonTextElm ? buttonTextElm[0] : null;\n\n  if (!elmToUpdate) {\n    console.error(\"Something is wrong with your markup, please verify your step is setup properly\");\n    return;\n  }\n\n  setElementText(elmToUpdate, isButtonStateShow(buttonState) ? states.hide : states.show);\n};\n/**\r\n * Adds or removed the hovered class to a step list item based on the isHovered param\r\n * @param {*} elm\r\n * @param {boolean} isHovered whether or not the given element is being hovered\r\n */\n\n\nvar toggleItemHoverStatus = function toggleItemHoverStatus(event, isHovered) {\n  var detailsButtonElm = event.target.closest(\".\".concat(cssClasses.section));\n  detailsButtonElm.classList[isHovered ? \"add\" : \"remove\"](cssClasses.hovered);\n};\n/**\r\n * Adjust the details section for a given step list, based on it's state\r\n * @param {HTMLElement} stepListElm\r\n */\n\n\nvar updateSections = function updateSections(stepListElm, newButtonState) {\n  var stepListSections = stepListElm.querySelectorAll(\".\".concat(cssClasses.section));\n  Array.from(stepListSections).forEach(function (sectionElm) {\n    var toggleBtnElm = Object(_utilities_dom_utilities__WEBPACK_IMPORTED_MODULE_0__[\"GetFirstElementOrDefault\"])(sectionElm, \".\".concat(cssClasses.detailsToggleButton));\n    var toggleButtonTextElm = Object(_utilities_dom_utilities__WEBPACK_IMPORTED_MODULE_0__[\"GetFirstElementOrDefault\"])(toggleBtnElm, \".\".concat(cssClasses.toggleButtonText));\n    var detailElms = sectionElm.querySelectorAll(\".\".concat(cssClasses.details));\n    var buttonState = newButtonState || toggleBtnElm.textContent;\n    setAriaExpanded(toggleBtnElm, !isButtonStateShow(buttonState));\n    Array.from(detailElms).forEach(function (elm) {\n      displaySectionDetails(elm, getOppositeDetailsToggleButtonState(buttonState));\n    });\n    setElementText(toggleButtonTextElm, buttonState);\n  });\n};\n/**\r\n * Manages the visible state of the toggle button based on a given details section\r\n * @param {NodeList} detailElms\r\n */\n\n\nvar updateToggleAllButton = function updateToggleAllButton(detailElms) {\n  if (!detailElms) {\n    console.error(\"There must be a least one details section per step list item.\");\n    return;\n  }\n\n  var stepListElm = detailElms[0].closest(\".\".concat(cssClasses.stepList));\n  var showAllButtonElm = Object(_utilities_dom_utilities__WEBPACK_IMPORTED_MODULE_0__[\"GetFirstElementOrDefault\"])(stepListElm, \".\".concat(cssClasses.showAllStepsButton));\n  var canHideAll = isHideAllVisible(showAllButtonElm);\n  var isAtLeastOneSectionDetailVisible = hasAtLeastOneDetailSectionVisible(stepListElm);\n\n  if (canHideAll && isAtLeastOneSectionDetailVisible) {\n    setElementText(showAllButtonElm, states.showAll);\n  }\n\n  if (!isAtLeastOneSectionDetailVisible) {\n    setElementText(showAllButtonElm, states.hideAll);\n  }\n};\n/**\r\n * Scripts to run after the page has loaded for this file\r\n */\n\n\nvar onDocumentReady = function onDocumentReady() {\n  // Get All Accordions\n  var stepListElms = document.querySelectorAll(\".\".concat(cssClasses.stepList)); // Check the state of each accordion\n\n  Array.from(stepListElms).forEach(function (stepListElm) {\n    var isDefaultStateStatic = stepListElm.classList.contains(states[\"static\"]);\n\n    if (isDefaultStateStatic) {\n      return;\n    }\n    /**\r\n     * Ensure we capture all events\r\n     * https://gomakethings.com/listening-for-click-events-with-vanilla-javascript/\r\n     */\n\n\n    document.addEventListener(\"click\", handleDocumentClick, false);\n    addStepListHoverEvents(stepListElm);\n    var isDefaultStateCollapsed = stepListElm.classList.contains(states.collapsed);\n\n    if (!isDefaultStateCollapsed) {\n      var toggleAllButtonElm = Object(_utilities_dom_utilities__WEBPACK_IMPORTED_MODULE_0__[\"GetFirstElementOrDefault\"])(stepListElm, \".\".concat(cssClasses.showAllStepsButton));\n      toggleAllButtonText(toggleAllButtonElm, states.show);\n    }\n\n    updateSections(stepListElm, isDefaultStateCollapsed ? states.show : states.hide);\n  });\n};\n/** Handler when the DOM is fully loaded */\n\n\ndocument.addEventListener(\"DOMContentLoaded\", onDocumentReady);\n\n//# sourceURL=webpack://Bc%5Bname%5D/./src/components/StepList.js?");

/***/ }),

/***/ "./src/polyfills/array-from.polyfill.js":
/*!**********************************************!*\
  !*** ./src/polyfills/array-from.polyfill.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("// Production steps of ECMA-262, Edition 6, 22.1.2.1\nif (!Array.from) {\n  Array.from = function () {\n    var toStr = Object.prototype.toString;\n\n    var isCallable = function isCallable(fn) {\n      return typeof fn === \"function\" || toStr.call(fn) === \"[object Function]\";\n    };\n\n    var toInteger = function toInteger(value) {\n      var number = Number(value);\n\n      if (isNaN(number)) {\n        return 0;\n      }\n\n      if (number === 0 || !isFinite(number)) {\n        return number;\n      }\n\n      return (number > 0 ? 1 : -1) * Math.floor(Math.abs(number));\n    };\n\n    var maxSafeInteger = Math.pow(2, 53) - 1;\n\n    var toLength = function toLength(value) {\n      var len = toInteger(value);\n      return Math.min(Math.max(len, 0), maxSafeInteger);\n    }; // The length property of the from method is 1.\n\n\n    return function from(arrayLike\n    /*, mapFn, thisArg */\n    ) {\n      // 1. Let C be the this value.\n      var C = this; // 2. Let items be ToObject(arrayLike).\n\n      var items = Object(arrayLike); // 3. ReturnIfAbrupt(items).\n\n      if (arrayLike == null) {\n        throw new TypeError(\"Array.from requires an array-like object - not null or undefined\");\n      } // 4. If mapfn is undefined, then let mapping be false.\n\n\n      var mapFn = arguments.length > 1 ? arguments[1] : void undefined;\n      var T;\n\n      if (typeof mapFn !== \"undefined\") {\n        // 5. else\n        // 5. a If IsCallable(mapfn) is false, throw a TypeError exception.\n        if (!isCallable(mapFn)) {\n          throw new TypeError(\"Array.from: when provided, the second argument must be a function\");\n        } // 5. b. If thisArg was supplied, let T be thisArg; else let T be undefined.\n\n\n        if (arguments.length > 2) {\n          T = arguments[2];\n        }\n      } // 10. Let lenValue be Get(items, \"length\").\n      // 11. Let len be ToLength(lenValue).\n\n\n      var len = toLength(items.length); // 13. If IsConstructor(C) is true, then\n      // 13. a. Let A be the result of calling the [[Construct]] internal method\n      // of C with an argument list containing the single item len.\n      // 14. a. Else, Let A be ArrayCreate(len).\n\n      var A = isCallable(C) ? Object(new C(len)) : new Array(len); // 16. Let k be 0.\n\n      var k = 0; // 17. Repeat, while k < len… (also steps a - h)\n\n      var kValue;\n\n      while (k < len) {\n        kValue = items[k];\n\n        if (mapFn) {\n          A[k] = typeof T === \"undefined\" ? mapFn(kValue, k) : mapFn.call(T, kValue, k);\n        } else {\n          A[k] = kValue;\n        }\n\n        k += 1;\n      } // 18. Let putStatus be Put(A, \"length\", len, true).\n\n\n      A.length = len; // 20. Return A.\n\n      return A;\n    };\n  }();\n}\n\n//# sourceURL=webpack://Bc%5Bname%5D/./src/polyfills/array-from.polyfill.js?");

/***/ }),

/***/ "./src/polyfills/closest.polyfill.js":
/*!*******************************************!*\
  !*** ./src/polyfills/closest.polyfill.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("if (!Element.prototype.matches) {\n  Element.prototype.matches = Element.prototype.msMatchesSelector || Element.prototype.webkitMatchesSelector;\n}\n\nif (!Element.prototype.closest) {\n  Element.prototype.closest = function (s) {\n    var el = this;\n\n    do {\n      if (el.matches(s)) return el;\n      el = el.parentElement || el.parentNode;\n    } while (el !== null && el.nodeType === 1);\n\n    return null;\n  };\n}\n\n//# sourceURL=webpack://Bc%5Bname%5D/./src/polyfills/closest.polyfill.js?");

/***/ }),

/***/ "./src/utilities/dom.utilities.js":
/*!****************************************!*\
  !*** ./src/utilities/dom.utilities.js ***!
  \****************************************/
/*! exports provided: AddClassToElms, GetFirstElementOrDefault, RemoveClassFromElms, SetAttributeForElms, ToggleClassForElms */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"AddClassToElms\", function() { return AddClassToElms; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"GetFirstElementOrDefault\", function() { return GetFirstElementOrDefault; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"RemoveClassFromElms\", function() { return RemoveClassFromElms; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"SetAttributeForElms\", function() { return SetAttributeForElms; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ToggleClassForElms\", function() { return ToggleClassForElms; });\n/**\r\n * Get the first element based on a css selector\r\n * @param {*} elm\r\n * @param {string} querySelector\r\n * @returns HTMLElement or null if the query selector does not match any elements.\r\n */\nvar GetFirstElementOrDefault = function GetFirstElementOrDefault(elm, querySelector) {\n  var elms = elm.querySelectorAll(querySelector);\n  return elms ? elms[0] : null;\n};\n/**\r\n * Set a specific attribute on a group of elements\r\n * @param {NodeList} elms collection of nodes, usually from document.querySelectorAll\r\n * @param {string} attributeName name of the attribute\r\n * @param {*} attributeValue attribute value\r\n */\n\n\nvar SetAttributeForElms = function SetAttributeForElms(elms, attributeName, attributeValue) {\n  elms.forEach(function (elm) {\n    elm.setAttribute(attributeName, attributeValue);\n  });\n};\n/**\r\n * Add Css Classes for a group of elements\r\n * @param {NodeList} elms collection of nodes, usually from document.querySelectorAll\r\n * @param {string} cssClass space separated string of css classes\r\n */\n\n\nvar AddClassToElms = function AddClassToElms(elms, cssClass) {\n  elms.forEach(function (elm) {\n    elm.classList.add(cssClass);\n  });\n};\n/**\r\n * Remove Css Classes for a group of elements\r\n * @param {NodeList} elms collection of nodes, usually from document.querySelectorAll\r\n * @param {string} cssClass space separated string of css classes\r\n */\n\n\nvar RemoveClassFromElms = function RemoveClassFromElms(elms, cssClass) {\n  elms.forEach(function (elm) {\n    elm.classList.remove(cssClass);\n  });\n};\n/**\r\n * Toggle Css Classes for a group of elements\r\n * @param {NodeList} elms collection of nodes, usually from document.querySelectorAll\r\n * @param {string} cssClass space separated string of css classes\r\n */\n\n\nvar ToggleClassForElms = function ToggleClassForElms(elms, cssClass) {\n  elms.forEach(function (elm) {\n    elm.classList.toggle(cssClass);\n  });\n};\n\n\n\n//# sourceURL=webpack://Bc%5Bname%5D/./src/utilities/dom.utilities.js?");

/***/ })

/******/ });